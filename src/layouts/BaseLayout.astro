---
import '../styles/global.css';

export interface Props {
  title: string;
  description?: string;
  image?: string;
}

const { title, description = 'Personal blog and portfolio', image = '/og-image.png' } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.site)} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, Astro.site)} />
    
    <title>{title}</title>
    
    <script is:inline>
      // On page load or when changing themes, best to add inline in `head` to avoid FOUC
      if (localStorage.getItem('theme') === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        document.documentElement.classList.add('dark')
      } else {
        document.documentElement.classList.remove('dark')
      }
    </script>
  </head>
  <body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors">
    <div class="min-h-screen">
      <slot />
    </div>
  </body>
</html>

<style is:global>
  @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
  @reference "tailwindcss";
  
  html {
    font-family: 'Inter', system-ui, sans-serif;
  }
  
  * {
    box-sizing: border-box;
  }
  
  body {
    margin: 0;
    padding: 0;
  }
  
  /* Scrollbar styles */
  ::-webkit-scrollbar {
    width: 10px;
  }
  
  ::-webkit-scrollbar-track {
    @apply bg-slate-50 dark:bg-slate-800;
  }
  
  ::-webkit-scrollbar-thumb {
    @apply bg-slate-400 dark:bg-slate-600 rounded-full;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    @apply bg-slate-500 dark:bg-slate-500;
  }
  
  /* Selection colors */
  ::selection {
    @apply bg-blue-500 text-white;
  }
  
  /* Focus styles */
  :focus {
    @apply outline-none ring-2 ring-blue-500 ring-offset-2 dark:ring-offset-gray-900;
  }
  
  /* Link styles */
  a {
    @apply text-blue-600 dark:text-blue-400 hover:underline;
  }
  
  /* Code styles */
  code {
    @apply bg-slate-50 dark:bg-slate-800 px-1 py-0.5 rounded text-sm;
  }
  
  pre code {
    @apply bg-transparent p-0;
  }
  
  /* Headings */
  h1 {
    @apply text-4xl font-bold mb-4;
  }
  
  h2 {
    @apply text-3xl font-semibold mb-3;
  }
  
  h3 {
    @apply text-2xl font-semibold mb-2;
  }
  
  /* Prose styles */
  .prose {
    @apply max-w-none;
  }
  
  .prose p {
    @apply mb-4 leading-relaxed;
  }
  
  .prose ul, .prose ol {
    @apply mb-4 pl-6;
  }
  
  .prose li {
    @apply mb-2;
  }
  
  .prose blockquote {
    @apply border-l-4 border-slate-300 dark:border-slate-700 pl-4 italic;
  }
</style>